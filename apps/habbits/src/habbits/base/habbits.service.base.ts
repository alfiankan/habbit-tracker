/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Habbits as PrismaHabbits,
  User as PrismaUser,
} from "@prisma/client";

export class HabbitsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.HabbitsCountArgs, "select">): Promise<number> {
    return this.prisma.habbits.count(args);
  }

  async habbitsItems<T extends Prisma.HabbitsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.HabbitsFindManyArgs>
  ): Promise<PrismaHabbits[]> {
    return this.prisma.habbits.findMany<Prisma.HabbitsFindManyArgs>(args);
  }
  async habbits<T extends Prisma.HabbitsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.HabbitsFindUniqueArgs>
  ): Promise<PrismaHabbits | null> {
    return this.prisma.habbits.findUnique(args);
  }
  async createHabbits<T extends Prisma.HabbitsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.HabbitsCreateArgs>
  ): Promise<PrismaHabbits> {
    return this.prisma.habbits.create<T>(args);
  }
  async updateHabbits<T extends Prisma.HabbitsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.HabbitsUpdateArgs>
  ): Promise<PrismaHabbits> {
    return this.prisma.habbits.update<T>(args);
  }
  async deleteHabbits<T extends Prisma.HabbitsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.HabbitsDeleteArgs>
  ): Promise<PrismaHabbits> {
    return this.prisma.habbits.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.habbits
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
